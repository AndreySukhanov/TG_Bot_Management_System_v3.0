from http.server import BaseHTTPRequestHandler
import json
import asyncio
import logging
import os
import sys
from urllib.parse import parse_qs

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
current_dir = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.dirname(current_dir)
sys.path.insert(0, root_dir)
sys.path.insert(0, os.path.join(root_dir, 'utils'))
sys.path.insert(0, os.path.join(root_dir, 'handlers'))
sys.path.insert(0, os.path.join(root_dir, 'db'))
sys.path.insert(0, os.path.join(root_dir, 'nlp'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
bot = None
dp = None

# –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–∫ fallback –¥–ª—è Vercel
class BuiltinConfig:
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π"""
    
    BOT_TOKEN = os.getenv("BOT_TOKEN", "")
    DATABASE_PATH = "bot.db"
    LOW_BALANCE_THRESHOLD = 100.0
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã)
    MARKETERS = [int(x) for x in os.getenv("MARKETERS", "123456789").split(",") if x.strip()]
    FINANCIERS = [int(x) for x in os.getenv("FINANCIERS", "987654321").split(",") if x.strip()]  
    MANAGERS = [int(x) for x in os.getenv("MANAGERS", "555666777").split(",") if x.strip()]
    
    @classmethod
    def get_user_role(cls, user_id: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        if user_id in cls.MARKETERS:
            return "marketer"
        elif user_id in cls.FINANCIERS:
            return "financier"
        elif user_id in cls.MANAGERS:
            return "manager"
        else:
            return "unknown"
    
    @classmethod
    def is_authorized(cls, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return cls.get_user_role(user_id) != "unknown"

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
builtin_config = BuiltinConfig()

async def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    global bot, dp
    
    if bot is not None and dp is not None:
        logger.info("–ë–æ—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π")
        return bot, dp
    
    try:
        from aiogram import Bot, Dispatcher
        from aiogram.fsm.storage.memory import MemoryStorage
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            raise Exception("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=bot_token)
        dp = Dispatcher(storage=MemoryStorage())
        
        logger.info("‚úì –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É
        logger.info("üì¶ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
        
        # –®–∞–≥ 1: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        try:
            logger.info("1Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º db.database...")
            try:
                from db.database import init_database
            except ImportError:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è Vercel
                import sys
                import importlib.util
                
                db_path = os.path.join(root_dir, 'db', 'database.py')
                if os.path.exists(db_path):
                    spec = importlib.util.spec_from_file_location("database", db_path)
                    database_module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(database_module)
                    init_database = database_module.init_database
                else:
                    raise ImportError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª db/database.py")
                    
            logger.info("‚úì db.database –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            await init_database()
            logger.info("‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –æ—à–∏–±–∫—É - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            logger.warning("‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ fallback —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
        
        # –®–∞–≥ 2: –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers_imported = {}
        
        def safe_import_handler(module_name: str, function_name: str):
            """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å fallback"""
            try:
                logger.info(f"2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º {module_name}...")
                
                # –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                logger.info(f"   üîç –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è: {module_name}")
                logger.info(f"   üîç –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é: {function_name}")
                
                module = __import__(module_name, fromlist=[function_name])
                logger.info(f"   ‚úÖ –ú–æ–¥—É–ª—å {module_name} –∑–∞–≥—Ä—É–∂–µ–Ω")
                
                handler_func = getattr(module, function_name)
                logger.info(f"   ‚úÖ –§—É–Ω–∫—Ü–∏—è {function_name} –Ω–∞–π–¥–µ–Ω–∞")
                
                logger.info(f"‚úì {module_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return handler_func
                
            except ImportError as ie:
                logger.error(f"‚ùå ImportError –≤ {module_name}: {ie}")
                logger.error(f"   üìç –î–µ—Ç–∞–ª–∏: {str(ie)}")
                return None
            except AttributeError as ae:
                logger.error(f"‚ùå AttributeError –≤ {module_name}: {ae}")
                logger.error(f"   üìç –§—É–Ω–∫—Ü–∏—è {function_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥—É–ª–µ")
                return None
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {module_name}: {e}")
                logger.error(f"   üìç –¢–∏–ø: {type(e).__name__}")
                import traceback
                logger.error(f"   üìç Traceback: {traceback.format_exc()}")
                return None
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
        handlers_imported['common'] = safe_import_handler('handlers.common', 'setup_common_handlers')
        
        handlers_imported['command'] = safe_import_handler('handlers.command_handlers', 'setup_command_handlers')
        handlers_imported['menu'] = safe_import_handler('handlers.menu_handler', 'setup_menu_handlers')
        handlers_imported['voice'] = safe_import_handler('handlers.voice_handler', 'setup_voice_handlers')
        handlers_imported['marketer'] = safe_import_handler('handlers.marketer', 'setup_marketer_handlers')
        handlers_imported['financier'] = safe_import_handler('handlers.financier', 'setup_financier_handlers')
        handlers_imported['manager'] = safe_import_handler('handlers.manager', 'setup_manager_handlers')
        
        # –®–∞–≥ 3: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        logger.info("3Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        final_handlers = len(dp.message.handlers)
        logger.info(f"üéØ –ò–¢–û–ì–û –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–û MESSAGE HANDLERS: {final_handlers}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        successful_imports = sum(1 for h in handlers_imported.values() if h is not None)
        logger.info(f"üìä –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {successful_imports}/{len(handlers_imported)}")
        
        if final_handlers == 0:
            logger.error("‚ùå –ù–ï –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–û –ù–ò –û–î–ù–û–ì–û MESSAGE HANDLER!")
            logger.info("üÜò –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
            await add_minimal_handlers(dp)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        working_handlers = 0
        logger.info("üîß –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í...")
        
        try:
            for name, handler_func in handlers_imported.items():
                try:
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {name}...")
                    if handler_func is not None:
                        logger.info(f"üîç –ü—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å {name}...")
                        handler_func(dp)
                        working_handlers += 1
                        logger.info(f"‚úÖ {name} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    else:
                        logger.info(f"‚ö†Ô∏è {name} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (None)")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {name}: {str(e)}")
                    import traceback
                    logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            
            logger.info(f"üìä –†–∞–±–æ—Ç–∞—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {working_handlers}/{len(handlers_imported)}")
            
        except Exception as e:
            logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¶–ò–ö–õ–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í: {str(e)}")
            import traceback
            logger.error(f"üí• Traceback: {traceback.format_exc()}")
        
        # –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        try:
            logger.info("üöÄ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
            await add_builtin_handlers(dp)
            logger.info("‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"üí• –û–®–ò–ë–ö–ê –í–°–¢–†–û–ï–ù–ù–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í: {str(e)}")
            import traceback
            logger.error(f"üí• Traceback: {traceback.format_exc()}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è fallback
        final_handlers = len(dp.message.handlers)
        logger.info(f"üéØ –ò–¢–û–ì–û MESSAGE HANDLERS (—Å fallback): {final_handlers}")
        
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        for i, handler in enumerate(dp.message.handlers):
            handler_name = handler.callback.__name__ if handler.callback else "Unknown"
            logger.info(f"  üìù Handler {i}: {handler_name}")
        
        # –®–∞–≥ 4: –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            logger.info("4Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º utils.bot_commands...")
            bot_commands_func = safe_import_handler('utils.bot_commands', 'BotCommandManager')
            if bot_commands_func:
                logger.info("‚úì utils.bot_commands –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                
                logger.info("4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞...")
                command_manager = bot_commands_func(bot)
                await command_manager.setup_commands()
                logger.info("‚úì –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            else:
                logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - –º–æ–¥—É–ª—å –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): {e}")
        
        logger.info("üéâ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        return bot, dp
        
    except Exception as e:
        logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –±–æ—Ç —Å –∞–≤–∞—Ä–∏–π–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        if bot is None:
            bot = Bot(token=os.getenv("BOT_TOKEN"))
            dp = Dispatcher(storage=MemoryStorage())
            await add_emergency_handler(dp)
        
        return bot, dp

async def add_minimal_handlers(dp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    from aiogram import types
    from aiogram.filters import Command
    
    async def minimal_start(message: types.Message):
        await message.reply("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    
    async def minimal_help(message: types.Message):
        await message.reply("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.")
    
    async def minimal_default(message: types.Message):
        await message.reply("ü§ñ –ë–æ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    
    dp.message.register(minimal_start, Command("start"))
    dp.message.register(minimal_help, Command("help"))
    dp.message.register(minimal_default)
    
    logger.info("‚úì –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

async def add_emergency_handler(dp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    from aiogram import types
    
    async def emergency_handler(message: types.Message):
        """–ê–≤–∞—Ä–∏–π–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        await message.reply("ü§ñ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    
    dp.message.register(emergency_handler)
    logger.info("‚úì –ê–≤–∞—Ä–∏–π–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

async def add_fallback_handler(dp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –¢–û–ß–ù–û —Å—Ä–∞–±–æ—Ç–∞–µ—Ç"""
    from aiogram import types
    from aiogram.filters import Command
    
    async def fallback_start(message: types.Message):
        """Fallback start handler"""
        try:
            user_id = message.from_user.id
            logger.info(f"üÜò Fallback /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.reply(
                "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.\n"
                "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n"
                "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ fallback_start: {e}")
    
    async def fallback_help(message: types.Message):
        """Fallback help handler"""
        try:
            user_id = message.from_user.id
            logger.info(f"üÜò Fallback /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.reply(
                "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ (—Ä–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n"
                "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
                "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
                "–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ fallback_help: {e}")
    
    async def fallback_status(message: types.Message):
        """Fallback status handler"""
        try:
            user_id = message.from_user.id
            logger.info(f"üÜò Fallback /status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.reply(
                "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n\n"
                "ü§ñ –ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω (—Ä–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)\n"
                "‚ö° Webhook: –†–∞–±–æ—Ç–∞–µ—Ç\n"
                "üõ°Ô∏è –†–µ–∂–∏–º: Fallback handlers\n\n"
                "–ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ fallback_status: {e}")
    
    async def fallback_default(message: types.Message):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        try:
            user_id = message.from_user.id
            text = message.text or "<non-text>"
            logger.info(f"üÜò Fallback default –¥–ª—è {user_id}: {text[:50]}")
            await message.reply(
                f"ü§ñ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ¬´{text[:50]}{'...' if len(text) > 50 else ''}¬ª\n\n"
                f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ fallback_default: {e}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ 
    dp.message.register(fallback_start, Command("start"))
    dp.message.register(fallback_help, Command("help"))  
    dp.message.register(fallback_status, Command("status"))
    dp.message.register(fallback_default)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π - –ª–æ–≤–∏—Ç –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    
    logger.info("‚úì Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

async def add_builtin_handlers(dp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    from aiogram import types
    from aiogram.filters import Command
    
    async def builtin_start(message: types.Message):
        """–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π start handler"""
        try:
            user_id = message.from_user.id
            username = message.from_user.username or "Unknown"
            
            logger.info(f"üöÄ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username})")
            
            user_role = builtin_config.get_user_role(user_id)
            
            if user_role == "unknown":
                await message.answer(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π."
                )
                return
            
            role_messages = {
                "marketer": (
                    "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ **–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥**.\n\n"
                    "üìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                    "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n"
                    "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
                    "ü§ñ –†–µ–∂–∏–º: –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"
                ),
                "financier": (
                    "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ **–§–∏–Ω–∞–Ω—Å–∏—Å—Ç**.\n\n"
                    "üíº **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                    "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n"
                    "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
                    "ü§ñ –†–µ–∂–∏–º: –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"
                ),
                "manager": (
                    "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ **–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å**.\n\n"
                    "üë®‚Äçüíº **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                    "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n"
                    "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
                    "ü§ñ –†–µ–∂–∏–º: –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"
                )
            }
            
            await message.answer(
                role_messages[user_role], 
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ builtin_start: {e}")
    
    async def builtin_help(message: types.Message):
        """–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π help handler"""
        try:
            user_id = message.from_user.id
            user_role = builtin_config.get_user_role(user_id)
            
            if user_role == "unknown":
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
                return
            
            await message.answer(
                f"üìñ **–°–ø—Ä–∞–≤–∫–∞ ({user_role})**\n\n"
                f"ü§ñ **–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã**\n"
                f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.\n\n"
                f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                f"‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                f"‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
                f"‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
                f"**–í–∞—à–∞ —Ä–æ–ª—å:** {user_role}\n"
                f"**ID:** {user_id}",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ builtin_help: {e}")
    
    async def builtin_status(message: types.Message):
        """–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π status handler"""
        try:
            user_id = message.from_user.id
            user_role = builtin_config.get_user_role(user_id)
            
            await message.answer(
                f"üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**\n\n"
                f"ü§ñ **–ë–æ—Ç:** –ê–∫—Ç–∏–≤–µ–Ω (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)\n"
                f"‚ö° **Webhook:** –†–∞–±–æ—Ç–∞–µ—Ç\n"
                f"üõ°Ô∏è **–†–µ–∂–∏–º:** Builtin handlers\n"
                f"üë§ **–í–∞—à–∞ —Ä–æ–ª—å:** {user_role}\n"
                f"üÜî **–í–∞—à ID:** {user_id}\n\n"
                f"‚úÖ **–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ**",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ builtin_status: {e}")
    
    async def builtin_default(message: types.Message):
        """–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π default handler"""
        try:
            user_id = message.from_user.id
            user_role = builtin_config.get_user_role(user_id)
            text = message.text or "<non-text>"
            
            if user_role == "unknown":
                await message.answer(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            await message.answer(
                f"ü§ñ **–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:** ¬´{text[:50]}{'...' if len(text) > 50 else ''}¬ª\n\n"
                f"üë§ **–†–æ–ª—å:** {user_role}\n"
                f"üîß **–†–µ–∂–∏–º:** –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ builtin_default: {e}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(builtin_start, Command("start"))
    dp.message.register(builtin_help, Command("help"))  
    dp.message.register(builtin_status, Command("status"))
    dp.message.register(builtin_default)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π - –ª–æ–≤–∏—Ç –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    
    logger.info("‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            logger.info(f"GET –∑–∞–ø—Ä–æ—Å: {self.path}")
            
            # Health check
            if self.path in ['/', '/health']:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
                try:
                    bot_instance, dp_instance = asyncio.run(init_bot())
                    handlers_count = len(dp_instance.message.handlers) if dp_instance.message.handlers else 0
                    response = {
                        "status": "ok", 
                        "bot": "running",
                        "webhook": "active",
                        "handlers": handlers_count,
                        "message": "Bot initialized successfully"
                    }
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –≤ health check: {e}")
                    response = {
                        "status": "error", 
                        "bot": "error",
                        "webhook": "inactive",
                        "error": str(e)
                    }
                self._send_response(200, response)
                return
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
            if self.path == '/set_webhook':
                result = asyncio.run(self._set_webhook())
                self._send_response(200, result)
                return
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook
            if self.path == '/webhook_info':
                result = asyncio.run(self._get_webhook_info())
                self._send_response(200, result)
                return
            
            # 404 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            self._send_response(404, {"error": "Not found", "path": self.path})
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self._send_response(500, {"error": str(e)})
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            logger.info(f"POST –∑–∞–ø—Ä–æ—Å: {self.path}")
            
            # Webhook endpoint
            if self.path == '/webhook':
                result = self._run_async_safe(self._handle_webhook)
                self._send_response(200, result)
                return
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —á–µ—Ä–µ–∑ POST
            if self.path == '/set_webhook':
                result = self._run_async_safe(self._set_webhook)
                self._send_response(200, result)
                return
            
            # 404 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            self._send_response(404, {"error": "Not found", "path": self.path})
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self._send_response(500, {"error": str(e)})
    
    def _run_async_safe(self, coro_func):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ async —Ñ—É–Ω–∫—Ü–∏–∏ –≤ serverless –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
        # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∫–∞–∂–¥–æ–≥–æ webhook –∑–∞–ø—Ä–æ—Å–∞
        # –≠—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –≤ serverless –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        try:
            logger.info("üîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è webhook")
            new_loop = asyncio.new_event_loop()
            asyncio.set_event_loop(new_loop)
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ coroutine
            result = new_loop.run_until_complete(coro_func())
            new_loop.close()
            logger.info("‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –Ω–æ–≤—ã–º event loop")
            return result
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ–º event loop: {e}")
            # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –∫–∞–∫ fallback
            try:
                logger.info("üîß –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –∫–∞–∫ fallback...")
                loop = asyncio.get_event_loop()
                if loop.is_closed():
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    logger.info("üîÑ –°–æ–∑–¥–∞–Ω fallback event loop")
                
                if loop.is_running():
                    try:
                        import nest_asyncio
                        nest_asyncio.apply()
                        logger.info("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω nest_asyncio –≤ fallback")
                        return loop.run_until_complete(coro_func())
                    except ImportError:
                        raise Exception("nest_asyncio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏ loop –∑–∞–ø—É—â–µ–Ω")
                else:
                    return loop.run_until_complete(coro_func())
                    
            except Exception as e2:
                logger.error(f"üí• –í—Å–µ –º–µ—Ç–æ–¥—ã event loop –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏: {e2}")
                raise
    
    async def _handle_webhook(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length).decode('utf-8')
            data = json.loads(post_data)
            
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {json.dumps(data, ensure_ascii=False)[:200]}...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            bot_instance, dp_instance = await init_bot()
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å—Ç—å
            handlers_count = len(dp_instance.message.handlers) if dp_instance.message.handlers else 0
            logger.info(f"üéØ –î–æ—Å—Ç—É–ø–Ω–æ message handlers: {handlers_count}")
            
            if handlers_count == 0:
                logger.error("‚ùå –ù–ï–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–û–ë–©–ï–ù–ò–ô!")
                logger.info("üÜò –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...")
                await add_minimal_handlers(dp_instance)
                handlers_count = len(dp_instance.message.handlers)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {handlers_count}")
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                for i, handler in enumerate(dp_instance.message.handlers):
                    handler_name = handler.callback.__name__ if handler.callback else "Unknown"
                    logger.info(f"  üìù Handler {i}: {handler_name}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ Update –æ–±—ä–µ–∫—Ç–∞
            from aiogram.types import Update
            update = Update(**data)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∞–ø–¥–µ–π—Ç–∞
            if update.message:
                text = update.message.text or "<non-text message>"
                user_id = update.message.from_user.id if update.message.from_user else "unknown"
                logger.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{text[:50]}...'")
            elif update.callback_query:
                logger.info(f"üîò Callback query: {update.callback_query.data}")
            else:
                logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–ø–¥–µ–π—Ç–∞: {update}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            logger.info("‚ö° –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–ø–¥–µ–π—Ç–∞...")
            await dp_instance.feed_update(bot_instance, update)
            logger.info("‚úÖ –ê–ø–¥–µ–π—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            return {"ok": True}
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise
    
    async def _set_webhook(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
        try:
            from aiogram import Bot
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            bot_token = os.getenv("BOT_TOKEN")
            if not bot_token:
                raise Exception("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            temp_bot = Bot(token=bot_token)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞
            host = self.headers.get('host', self.headers.get('Host', 'unknown'))
            webhook_url = f"https://{host}/webhook"
            
            result = await temp_bot.set_webhook(webhook_url)
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            await temp_bot.session.close()
            
            return {
                "ok": True, 
                "webhook_url": webhook_url,
                "result": result
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            raise
    
    async def _get_webhook_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook"""
        try:
            from aiogram import Bot
            
            bot_token = os.getenv("BOT_TOKEN")
            if not bot_token:
                raise Exception("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            temp_bot = Bot(token=bot_token)
            info = await temp_bot.get_webhook_info()
            
            await temp_bot.session.close()
            
            return {
                "url": info.url,
                "has_custom_certificate": info.has_custom_certificate,
                "pending_update_count": info.pending_update_count,
                "last_error_date": info.last_error_date,
                "last_error_message": info.last_error_message,
                "max_connections": info.max_connections,
                "allowed_updates": info.allowed_updates
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
            raise
    
    def _send_response(self, status_code, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞"""
        try:
            response_body = json.dumps(data, ensure_ascii=False).encode('utf-8')
            
            self.send_response(status_code)
            self.send_header('Content-Type', 'application/json; charset=utf-8')
            self.send_header('Content-Length', str(len(response_body)))
            self.end_headers()
            self.wfile.write(response_body)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
