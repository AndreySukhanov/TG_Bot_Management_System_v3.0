from http.server import BaseHTTPRequestHandler
import json
import asyncio
import logging
import os
import sys
from urllib.parse import parse_qs

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
current_dir = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.dirname(current_dir)
sys.path.insert(0, root_dir)
sys.path.insert(0, os.path.join(root_dir, 'utils'))
sys.path.insert(0, os.path.join(root_dir, 'handlers'))
sys.path.insert(0, os.path.join(root_dir, 'db'))
sys.path.insert(0, os.path.join(root_dir, 'nlp'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
bot = None
dp = None

async def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    global bot, dp
    
    if bot is not None and dp is not None:
        logger.info("–ë–æ—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π")
        return bot, dp
    
    try:
        from aiogram import Bot, Dispatcher
        from aiogram.fsm.storage.memory import MemoryStorage
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            raise Exception("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=bot_token)
        dp = Dispatcher(storage=MemoryStorage())
        
        logger.info("‚úì –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É
        logger.info("üì¶ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
        
        # –®–∞–≥ 1: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        try:
            logger.info("1Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º db.database...")
            from db.database import init_database
            logger.info("‚úì db.database –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            await init_database()
            logger.info("‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise e
        
        # –®–∞–≥ 2: –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers_imported = {}
        
        try:
            logger.info("2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handlers.common...")
            from handlers.common import setup_common_handlers
            handlers_imported['common'] = setup_common_handlers
            logger.info("‚úì handlers.common –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ handlers.common: {e}")
            handlers_imported['common'] = None
        
        try:
            logger.info("2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handlers.command_handlers...")
            from handlers.command_handlers import setup_command_handlers
            handlers_imported['command'] = setup_command_handlers
            logger.info("‚úì handlers.command_handlers –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ handlers.command_handlers: {e}")
            handlers_imported['command'] = None
        
        try:
            logger.info("2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handlers.menu_handler...")
            from handlers.menu_handler import setup_menu_handlers
            handlers_imported['menu'] = setup_menu_handlers
            logger.info("‚úì handlers.menu_handler –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ handlers.menu_handler: {e}")
            handlers_imported['menu'] = None
        
        try:
            logger.info("2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handlers.voice_handler...")
            from handlers.voice_handler import setup_voice_handlers
            handlers_imported['voice'] = setup_voice_handlers
            logger.info("‚úì handlers.voice_handler –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ handlers.voice_handler: {e}")
            handlers_imported['voice'] = None
        
        try:
            logger.info("2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handlers.marketer...")
            from handlers.marketer import setup_marketer_handlers
            handlers_imported['marketer'] = setup_marketer_handlers
            logger.info("‚úì handlers.marketer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ handlers.marketer: {e}")
            handlers_imported['marketer'] = None
        
        try:
            logger.info("2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handlers.financier...")
            from handlers.financier import setup_financier_handlers
            handlers_imported['financier'] = setup_financier_handlers
            logger.info("‚úì handlers.financier –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ handlers.financier: {e}")
            handlers_imported['financier'] = None
        
        try:
            logger.info("2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handlers.manager...")
            from handlers.manager import setup_manager_handlers
            handlers_imported['manager'] = setup_manager_handlers
            logger.info("‚úì handlers.manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ handlers.manager: {e}")
            handlers_imported['manager'] = None
        
        # –®–∞–≥ 3: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        logger.info("3Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
        if handlers_imported['command']:
            try:
                handlers_imported['command'](dp)
                logger.info(f"‚úì Command handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ({len(dp.message.handlers)} total)")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ command handlers: {e}")
        
        if handlers_imported['voice']:
            try:
                handlers_imported['voice'](dp)
                logger.info(f"‚úì Voice handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ({len(dp.message.handlers)} total)")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ voice handlers: {e}")
        
        if handlers_imported['marketer']:
            try:
                handlers_imported['marketer'](dp)
                logger.info(f"‚úì Marketer handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ({len(dp.message.handlers)} total)")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ marketer handlers: {e}")
        
        if handlers_imported['financier']:
            try:
                handlers_imported['financier'](dp)
                logger.info(f"‚úì Financier handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ({len(dp.message.handlers)} total)")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ financier handlers: {e}")
        
        if handlers_imported['manager']:
            try:
                handlers_imported['manager'](dp)
                logger.info(f"‚úì Manager handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ({len(dp.message.handlers)} total)")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ manager handlers: {e}")
        
        if handlers_imported['menu']:
            try:
                handlers_imported['menu'](dp)
                logger.info(f"‚úì Menu handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ({len(dp.message.handlers)} total)")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ menu handlers: {e}")
        
        # Common handlers - –í–°–ï–ì–î–ê –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏
        if handlers_imported['common']:
            try:
                handlers_imported['common'](dp)
                logger.info(f"‚úì Common handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ({len(dp.message.handlers)} total)")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ common handlers: {e}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        final_handlers = len(dp.message.handlers)
        logger.info(f"üéØ –ò–¢–û–ì–û –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–û MESSAGE HANDLERS: {final_handlers}")
        
        if final_handlers == 0:
            logger.error("‚ùå –ù–ï –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–û –ù–ò –û–î–ù–û–ì–û MESSAGE HANDLER!")
            logger.info("üÜò –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
            await add_minimal_handlers(dp)
        else:
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            for i, handler in enumerate(dp.message.handlers):
                handler_name = handler.callback.__name__
                logger.info(f"  üìù Handler {i}: {handler_name}")
        
        # –®–∞–≥ 4: –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            logger.info("4Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º utils.bot_commands...")
            from utils.bot_commands import BotCommandManager
            logger.info("‚úì utils.bot_commands –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞...")
            command_manager = BotCommandManager(bot)
            await command_manager.setup_commands()
            logger.info("‚úì –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): {e}")
        
        logger.info("üéâ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        return bot, dp
        
    except Exception as e:
        logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –±–æ—Ç —Å –∞–≤–∞—Ä–∏–π–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        if bot is None:
            bot = Bot(token=os.getenv("BOT_TOKEN"))
            dp = Dispatcher(storage=MemoryStorage())
            await add_emergency_handler(dp)
        
        return bot, dp

async def add_minimal_handlers(dp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    from aiogram import types
    from aiogram.filters import Command
    
    async def minimal_start(message: types.Message):
        await message.reply("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    
    async def minimal_help(message: types.Message):
        await message.reply("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.")
    
    async def minimal_default(message: types.Message):
        await message.reply("ü§ñ –ë–æ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    
    dp.message.register(minimal_start, Command("start"))
    dp.message.register(minimal_help, Command("help"))
    dp.message.register(minimal_default)
    
    logger.info("‚úì –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

async def add_emergency_handler(dp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    from aiogram import types
    
    async def emergency_handler(message: types.Message):
        """–ê–≤–∞—Ä–∏–π–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        await message.reply("ü§ñ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    
    dp.message.register(emergency_handler)
    logger.info("‚úì –ê–≤–∞—Ä–∏–π–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            logger.info(f"GET –∑–∞–ø—Ä–æ—Å: {self.path}")
            
            # Health check
            if self.path in ['/', '/health']:
                response = {
                    "status": "ok", 
                    "bot": "running",
                    "webhook": "active"
                }
                self._send_response(200, response)
                return
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
            if self.path == '/set_webhook':
                result = asyncio.run(self._set_webhook())
                self._send_response(200, result)
                return
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook
            if self.path == '/webhook_info':
                result = asyncio.run(self._get_webhook_info())
                self._send_response(200, result)
                return
            
            # 404 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            self._send_response(404, {"error": "Not found", "path": self.path})
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self._send_response(500, {"error": str(e)})
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            logger.info(f"POST –∑–∞–ø—Ä–æ—Å: {self.path}")
            
            # Webhook endpoint
            if self.path == '/webhook':
                result = asyncio.run(self._handle_webhook())
                self._send_response(200, result)
                return
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —á–µ—Ä–µ–∑ POST
            if self.path == '/set_webhook':
                result = asyncio.run(self._set_webhook())
                self._send_response(200, result)
                return
            
            # 404 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            self._send_response(404, {"error": "Not found", "path": self.path})
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self._send_response(500, {"error": str(e)})
    
    async def _handle_webhook(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length).decode('utf-8')
            data = json.loads(post_data)
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {json.dumps(data, ensure_ascii=False)[:200]}...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            bot_instance, dp_instance = await init_bot()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ Update –æ–±—ä–µ–∫—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
            from aiogram.types import Update
            update = Update(**data)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await dp_instance.feed_update(bot_instance, update)
            
            return {"ok": True}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            raise
    
    async def _set_webhook(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
        try:
            from aiogram import Bot
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            bot_token = os.getenv("BOT_TOKEN")
            if not bot_token:
                raise Exception("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            temp_bot = Bot(token=bot_token)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞
            host = self.headers.get('host', self.headers.get('Host', 'unknown'))
            webhook_url = f"https://{host}/webhook"
            
            result = await temp_bot.set_webhook(webhook_url)
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            await temp_bot.session.close()
            
            return {
                "ok": True, 
                "webhook_url": webhook_url,
                "result": result
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            raise
    
    async def _get_webhook_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook"""
        try:
            from aiogram import Bot
            
            bot_token = os.getenv("BOT_TOKEN")
            if not bot_token:
                raise Exception("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            temp_bot = Bot(token=bot_token)
            info = await temp_bot.get_webhook_info()
            
            await temp_bot.session.close()
            
            return {
                "url": info.url,
                "has_custom_certificate": info.has_custom_certificate,
                "pending_update_count": info.pending_update_count,
                "last_error_date": info.last_error_date,
                "last_error_message": info.last_error_message,
                "max_connections": info.max_connections,
                "allowed_updates": info.allowed_updates
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
            raise
    
    def _send_response(self, status_code, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞"""
        try:
            response_body = json.dumps(data, ensure_ascii=False).encode('utf-8')
            
            self.send_response(status_code)
            self.send_header('Content-Type', 'application/json; charset=utf-8')
            self.send_header('Content-Length', str(len(response_body)))
            self.end_headers()
            self.wfile.write(response_body)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
