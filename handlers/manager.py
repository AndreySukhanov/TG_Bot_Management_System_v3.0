"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""

import re
from datetime import datetime
from typing import Dict, Any
from aiogram import Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from utils.config import Config
from utils.logger import log_action
from db.database import BalanceDB, PaymentDB, ProjectDB
from nlp.universal_ai_parser import UniversalAIParser
from nlp.manager_ai_assistant import process_manager_query
from handlers.nlp_command_handler import smart_message_router
import logging

logger = logging.getLogger(__name__)


async def is_analytics_query(text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    analytics_keywords = [
        '—Å–∫–æ–ª—å–∫–æ', '–∫–∞–∫–æ–π', '–∫–∞–∫–∏–µ', '–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞',
        '–±–∞–ª–∞–Ω—Å', '–ø–ª–∞—Ç–µ–∂–∏', '–∫–æ–º–∞–Ω–¥–∞', '–ø—Ä–æ–µ–∫—Ç—ã', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        '–æ–ø–µ—Ä–∞—Ü–∏–∏', '–∏—Å—Ç–æ—Ä–∏—è', '–Ω–µ–¥–µ–ª—è', '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞',
        '–æ–∂–∏–¥–∞—é—â–∏–µ', '–æ–ø–ª–∞—Ç–∞', '—á–µ–ª–æ–≤–µ–∫', '—Ä–∞–∑–º–µ—Ä', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ',
        '–¥–∏–Ω–∞–º–∏–∫–∞', '–∏–∑–º–µ–Ω–µ–Ω–∏—è', '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–æ—Ç—á–µ—Ç', '–¥–∞–Ω–Ω—ã–µ'
    ]
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —è–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    balance_keywords = [
        '–ø–æ–ø–æ–ª–Ω', '–¥–æ–±–∞–≤', '–∑–∞–∫–∏–Ω', '–≤–Ω–µ—Å', '–ø–æ—Å—Ç—É–ø', 'added',
        '–∑–∞—á–∏—Å–ª', 'transfer', 'plus', '–ø–ª—é—Å', '+', '—É–≤–µ–ª–∏—á'
    ]
    
    text_lower = text.lower()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ —Ü–∏—Ñ—Ä—ã, —Ç–æ —ç—Ç–æ –Ω–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
    has_balance_keywords = any(keyword in text_lower for keyword in balance_keywords)
    has_numbers = re.search(r'\d', text)
    
    if has_balance_keywords and has_numbers:
        return False
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Ç–æ —ç—Ç–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
    has_analytics_keywords = any(keyword in text_lower for keyword in analytics_keywords)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    is_question = text.strip().endswith('?') or any(word in text_lower for word in ['—Å–∫–æ–ª—å–∫–æ', '–∫–∞–∫–æ–π', '–∫–∞–∫–∏–µ', '–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞'])
    
    return has_analytics_keywords or is_question


async def is_reset_balance_query(text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    reset_patterns = [
        r'–æ–±–Ω—É–ª[–∏|–∏—Ç—å|—è—Ç—å]?\s+–±–∞–ª–∞–Ω—Å',
        r'–æ—á–∏—Å—Ç[–∏|–∏—Ç—å|—è—Ç—å]?\s+–±–∞–ª–∞–Ω—Å',
        r'–±–∞–ª–∞–Ω—Å\s+(?:–≤\s+)?0(?:\.0+)?(?:\s*\$)?(?:\s+|$)',  # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "–±–∞–ª–∞–Ω—Å 0"
        r'—Å–¥–µ–ª–∞[–π|—Ç—å]?\s+–Ω—É–ª–µ–≤–æ–π\s+–±–∞–ª–∞–Ω—Å',
        r'–æ–±–Ω—É–ª–∏—Ç—å?\s+–±–∞–ª–∞–Ω—Å',
        r'–æ–±–Ω—É–ª–∏\s+–±–∞–ª–∞–Ω—Å',
        r'–æ—á–∏—Å—Ç–∏\s+–±–∞–ª–∞–Ω—Å',
        r'–±–∞–ª–∞–Ω—Å\s+–Ω–æ–ª—å',
        r'–±–∞–ª–∞–Ω—Å\s+–Ω–∞\s+–Ω–æ–ª—å',
        r'—Å–±—Ä–æ—Å\s+–±–∞–ª–∞–Ω—Å–∞',
        r'—Å–±—Ä–æ—Å—å?\s+–±–∞–ª–∞–Ω—Å',
        r'reset\s+balance',
        r'clear\s+balance',
        r'balance\s+0(?:\.0+)?(?:\s*\$)?(?:\s+|$)',  # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "balance 0"
        r'balance\s+zero'
    ]
    
    text_lower = text.lower()
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    exclude_patterns = [
        r'–ø–æ–ø–æ–ª–Ω[–∏|–∏—Ç—å|—è—Ç—å]',
        r'–¥–æ–±–∞–≤[–∏|–∏—Ç—å|—è—Ç—å]',
        r'–∑–∞–∫–∏–Ω[—É|—å|—É—Ç—å]',
        r'–≤–Ω–µ—Å[–∏|—Ç–∏]',
        r'–ø–æ—Å—Ç—É–ø[–∏|–∏—Ç—å|–ª–µ–Ω–∏–µ]',
        r'added',
        r'–∑–∞—á–∏—Å–ª[–∏|–∏—Ç—å|—è—Ç—å]',
        r'transfer'
    ]
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ–±–Ω—É–ª–µ–Ω–∏–µ–º
    for exclude_pattern in exclude_patterns:
        if re.search(exclude_pattern, text_lower):
            return False
    
    for pattern in reset_patterns:
        if re.search(pattern, text_lower):
            return True
    
    return False


async def analytics_query_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ AI"""
    user_id = message.from_user.id
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if config.get_user_role(user_id) != "manager":
        return
    
    log_action(user_id, "analytics_query", message.text)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ AI-–ø–æ–º–æ—â–Ω–∏–∫
        response = await process_manager_query(message.text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"ü§ñ <b>AI-–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n\n{response}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def reset_balance_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    user_id = message.from_user.id
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if config.get_user_role(user_id) != "manager":
        return
    
    log_action(user_id, "reset_balance_attempt", message.text)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        current_balance = await BalanceDB.get_balance()
        
        # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ 0)
        await reset_balance_to_zero(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            f"‚ö†Ô∏è –ë–ê–õ–ê–ù–° –û–ë–ù–£–õ–ï–ù\n\n"
            f"üìä –ë—ã–ª–æ: {current_balance:.2f}$\n"
            f"üîÑ –°—Ç–∞–ª–æ: 0.00$\n"
            f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª: {message.from_user.username or 'Unknown'}\n\n"
            f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–æ–≤ –æ–± –æ–±–Ω—É–ª–µ–Ω–∏–∏
        await notify_financiers_balance_reset(
            message.bot,
            current_balance,
            message.from_user.username or "Unknown"
        )
        
        log_action(user_id, "reset_balance_success", f"–ë–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª–µ–Ω —Å {current_balance:.2f}$")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def reset_balance_to_zero(user_id: int = 0):
    """–û–±–Ω—É–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    config = Config()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    current_balance = await BalanceDB.get_balance()
    
    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —É–∂–µ 0, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if current_balance == 0:
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–±—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞ –∫ –Ω—É–ª—é
    await BalanceDB.reset_balance_to_zero(description=f"–û–±–Ω—É–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º (ID: {user_id})")


async def notify_financiers_balance_reset(bot, old_balance: float, username: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–æ–≤ –æ–± –æ–±–Ω—É–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"""
    config = Config()
    
    notification_text = (
        f"‚ö†Ô∏è –ë–ê–õ–ê–ù–° –û–ë–ù–£–õ–ï–ù\n\n"
        f"üìä –ë—ã–ª–æ: {old_balance:.2f}$\n"
        f"üîÑ –°—Ç–∞–ª–æ: 0.00$\n"
        f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª: {username}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
    )
    
    for financier_id in config.FINANCIERS:
        try:
            await bot.send_message(
                financier_id,
                notification_text,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω—É–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç—É {financier_id}: {e}")


async def add_balance_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ AI"""
    user_id = message.from_user.id
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if config.get_user_role(user_id) != "manager":
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
    if await smart_message_router(message):
        return  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞
    
    log_action(user_id, "message_processing", message.text)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        ai_parser = UniversalAIParser()
        parsed_data = await ai_parser.parse_message(message.text, "manager")
        
        if not parsed_data:
            await handle_unparseable_message(message)
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        operation_type = parsed_data["operation_type"]
        confidence = parsed_data.get("confidence", 0)
        
        # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        if confidence < 0.7:
            await handle_low_confidence_message(message, parsed_data)
            return
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        if operation_type == "balance_add":
            await process_balance_add(message, parsed_data)
        elif operation_type == "balance_reset":
            await process_balance_reset(message, parsed_data)
        elif operation_type == "analytics_query":
            await process_analytics_query(message, parsed_data)
        elif operation_type == "system_command":
            await process_system_command(message, parsed_data)
        else:
            await handle_unknown_operation(message, parsed_data)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_processing_error(message, e)


async def process_balance_add(message: Message, parsed_data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ AI"""
    user_id = message.from_user.id
    amount = parsed_data.get("amount")
    description = parsed_data.get("description", "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
    
    if not amount or amount <= 0:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –±–æ–ª–µ–µ —è–≤–Ω–æ.",
            parse_mode="HTML"
        )
        return
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        old_balance = await BalanceDB.get_balance()
        
        # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        await BalanceDB.add_balance(amount, user_id, description)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        new_balance = await BalanceDB.get_balance()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        details = []
        if parsed_data.get("platform"):
            details.append(f"üéØ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {parsed_data['platform']}")
        if parsed_data.get("project"):
            details.append(f"üìÇ <b>–ü—Ä–æ–µ–∫—Ç:</b> {parsed_data['project']}")
        if parsed_data.get("payment_method"):
            details.append(f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {parsed_data['payment_method']}")
        if parsed_data.get("payment_details"):
            details.append(f"üî¢ <b>–î–µ—Ç–∞–ª–∏:</b> {parsed_data['payment_details']}")
        
        details_text = "\n".join(details) if details else ""
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await message.answer(
            f"‚úÖ <b>–ë–ê–õ–ê–ù–° –ü–û–ü–û–õ–ù–ï–ù!</b>\n\n"
            f"üí∞ <b>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {amount:.2f}$\n"
            f"üìä <b>–ë—ã–ª–æ:</b> {old_balance:.2f}$\n"
            f"üìà <b>–°—Ç–∞–ª–æ:</b> {new_balance:.2f}$\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"{details_text}\n\n"
            f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–æ–≤ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
        await notify_financiers_balance_updated(
            message.bot, 
            amount, 
            new_balance, 
            description
        )
        
        log_action(user_id, "balance_add_success", f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount}$ - {description}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def process_balance_reset(message: Message, parsed_data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ AI"""
    await reset_balance_handler(message)


async def process_analytics_query(message: Message, parsed_data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ AI"""
    await analytics_query_handler(message)


async def process_system_command(message: Message, parsed_data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ AI"""
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    await message.answer("ü§ñ –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –Ω–æ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")


async def handle_unparseable_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ AI –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å"""
    await message.answer(
        "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.</b>\n\n"
        "ü§ñ <b>AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:</b>\n"
        "‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n"
        "‚Ä¢ –û–±–Ω—É–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ <code>–ø–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ 500 –±–∞–∫—Å–æ–≤ –¥–ª—è –ò–Ω—Å—Ç—ã</code>\n"
        "‚Ä¢ <code>–æ–±–Ω—É–ª–∏ –±–∞–ª–∞–Ω—Å</code>\n"
        "‚Ä¢ <code>–∫–∞–∫–æ–π —Å–µ–π—á–∞—Å –±–∞–ª–∞–Ω—Å?</code>\n"
        "‚Ä¢ <code>—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ —Ä–µ–∫–ª–∞–º—É?</code>",
        parse_mode="HTML"
    )


async def handle_low_confidence_message(message: Message, parsed_data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é AI"""
    operation_type = parsed_data["operation_type"]
    confidence = parsed_data.get("confidence", 0)
    
    await message.answer(
        f"ü§î <b>–ù–µ —É–≤–µ—Ä–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        f"ü§ñ <b>AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª:</b> {operation_type}\n"
        f"üìä <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {confidence:.1%}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ —á–µ—Ç–∫–æ.\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä—ã —á–µ—Ç–∫–∏—Ö –∫–æ–º–∞–Ω–¥:</b>\n"
        f"‚Ä¢ <code>–ø–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ 500 –¥–æ–ª–ª–∞—Ä–æ–≤</code>\n"
        f"‚Ä¢ <code>–æ–±–Ω—É–ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é</code>\n"
        f"‚Ä¢ <code>–∫–∞–∫–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å?</code>",
        parse_mode="HTML"
    )


async def handle_unknown_operation(message: Message, parsed_data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    await message.answer(
        "‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è</b>\n\n"
        "ü§ñ AI –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "‚Ä¢ <code>/balance</code> - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "‚Ä¢ <code>/stats</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ <code>/ai –≤–æ–ø—Ä–æ—Å</code> - –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ AI\n"
        "‚Ä¢ <code>/help</code> - –ø–æ–º–æ—â—å",
        parse_mode="HTML"
    )


async def handle_processing_error(message: Message, error: Exception):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await message.answer(
        "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        "ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
        "<b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ <code>/balance</code> - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "‚Ä¢ <code>/stats</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ <code>/help</code> - –ø–æ–º–æ—â—å",
        parse_mode="HTML"
    )


async def statistics_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π)"""
    user_id = message.from_user.id
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if config.get_user_role(user_id) != "manager":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return
    
    log_action(user_id, "statistics_request", "")
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        current_balance = await BalanceDB.get_balance()
        pending_payments = await PaymentDB.get_pending_payments()
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—É–º–º –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        total_pending = sum(payment["amount"] for payment in pending_payments)
        
        status_emoji = "‚úÖ" if current_balance >= config.LOW_BALANCE_THRESHOLD else "‚ö†Ô∏è"
        
        await message.answer(
            f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>\n\n"
            f"{status_emoji} <b>–ë–∞–ª–∞–Ω—Å:</b> {current_balance:.2f}$\n"
            f"‚è≥ <b>–û–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç:</b> {len(pending_payments)} —à—Ç.\n"
            f"üí∏ <b>–°—É–º–º–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö:</b> {total_pending:.2f}$\n"
            f"üìâ <b>–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> {config.LOW_BALANCE_THRESHOLD}$\n\n"
            f"{'üü¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ' if current_balance >= config.LOW_BALANCE_THRESHOLD else 'üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –±–∞–ª–∞–Ω—Å—É'}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        )


async def notify_financiers_balance_updated(bot, amount: float, new_balance: float, description: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"""
    config = Config()
    
    notification_text = (
        f"üí∞ <b>–ë–ê–õ–ê–ù–° –ü–û–ü–û–õ–ù–ï–ù</b>\n\n"
        f"üìà <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:</b> +{amount:.2f}$\n"
        f"üí∞ <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {new_balance:.2f}$\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description if description else '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞'}"
    )
    
    for financier_id in config.FINANCIERS:
        try:
            await bot.send_message(
                financier_id,
                notification_text,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç—É {financier_id}: {e}")


async def ai_assistant_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai - –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ AI-–ø–æ–º–æ—â–Ω–∏–∫—É"""
    user_id = message.from_user.id
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if config.get_user_role(user_id) != "manager":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ AI-–ø–æ–º–æ—â–Ω–∏–∫—É.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    query = message.text.replace('/ai', '').strip()
    
    if not query:
        await message.answer(
            "ü§ñ <b>AI-–ü–æ–º–æ—â–Ω–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
            "‚Ä¢ <code>/ai –°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ–º–∞–Ω–¥–µ?</code>\n"
            "‚Ä¢ <code>/ai –ö–∞–∫–æ–π —Å–µ–π—á–∞—Å –±–∞–ª–∞–Ω—Å?</code>\n"
            "‚Ä¢ <code>/ai –ü–ª–∞—Ç–µ–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é</code>\n"
            "‚Ä¢ <code>/ai –ü–æ–∫–∞–∂–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã</code>\n"
            "‚Ä¢ <code>/ai –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</code>\n"
            "‚Ä¢ <code>/ai –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞</code>\n\n"
            "<b>–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:</b>\n"
            "‚Ä¢ <code>–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ–º–∞–Ω–¥–µ?</code>\n"
            "‚Ä¢ <code>–ö–∞–∫–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –±—ã–ª–∏ —Å–µ–≥–æ–¥–Ω—è?</code>\n"
            "‚Ä¢ <code>–°–∫–∞–∂–∏, –∫–∞–∫–æ–π —Å–µ–π—á–∞—Å –±–∞–ª–∞–Ω—Å?</code>",
            parse_mode="HTML"
        )
        return
    
    log_action(user_id, "ai_query", query)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ AI-–ø–æ–º–æ—â–Ω–∏–∫
        response = await process_manager_query(query)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"ü§ñ <b>AI-–ü–æ–º–æ—â–Ω–∏–∫:</b>\n\n{response}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def reset_balance_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /resetbalance"""
    user_id = message.from_user.id
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if config.get_user_role(user_id) != "manager":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await reset_balance_handler(message)


async def dashboard_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dashboard"""
    user_id = message.from_user.id
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if config.get_user_role(user_id) != "manager":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    dashboard_url = "https://lookerstudio.google.com/s/iA2eT2W5Lzo"
    
    await message.answer(
        f"üìä Looker Studio –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n\n"
        f"üîó <a href=\"{dashboard_url}\">–û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥</a>\n\n"
        f"üéØ Google Looker Studio - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
        f"‚ÑπÔ∏è –î–∞—à–±–æ—Ä–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
        f"‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –¥–∏–Ω–∞–º–∏–∫–∞\n"
        f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—ã\n"
        f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –∫–æ–º–∞–Ω–¥–µ\n"
        f"‚Ä¢ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç\n\n"
        f"üì± –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Looker Studio\n\n"
        f"üìã –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞:\n{dashboard_url}",
        parse_mode="HTML"
    )


async def projects_list_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /projects - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    user_id = message.from_user.id
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if config.get_user_role(user_id) != "manager":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    try:
        projects = await ProjectDB.get_all_projects()
        
        if not projects:
            await message.answer("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n<code>/addproject –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</code>", parse_mode="HTML")
            return
        
        active_projects = [p for p in projects if p['status'] == 'active']
        inactive_projects = [p for p in projects if p['status'] == 'inactive']
        
        message_text = "üìã <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê–ú–ò</b>\n\n"
        
        if active_projects:
            message_text += "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:</b>\n"
            for project in active_projects:
                description = f" - {project['description']}" if project['description'] else ""
                message_text += f"‚Ä¢ <b>{project['name']}</b>{description}\n"
            message_text += "\n"
        
        if inactive_projects:
            message_text += "‚ùå <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:</b>\n"
            for project in inactive_projects:
                description = f" - {project['description']}" if project['description'] else ""
                message_text += f"‚Ä¢ <b>{project['name']}</b>{description}\n"
            message_text += "\n"
        
        message_text += "<b>üìù –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
        message_text += "‚Ä¢ <code>/addproject –ù–∞–∑–≤–∞–Ω–∏–µ</code> - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
        message_text += "‚Ä¢ <code>/deactivate –ù–∞–∑–≤–∞–Ω–∏–µ</code> - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å\n"
        message_text += "‚Ä¢ <code>/activate –ù–∞–∑–≤–∞–Ω–∏–µ</code> - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å\n\n"
        message_text += f"üìä <b>–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:</b> {len(projects)}"
        
        await message.answer(message_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤.")


async def add_project_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /addproject - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = message.from_user.id
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if config.get_user_role(user_id) != "manager":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/addproject Alpha Marketing</code>\n\n"
            "<b>–ò–ª–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º:</b>\n"
            "<code>/addproject Beta Campaign - –†–µ–∫–ª–∞–º–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö</code>",
            parse_mode="HTML"
        )
        return
    
    project_input = command_parts[1].strip()
    
    # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (—á–µ—Ä–µ–∑ " - ")
    if " - " in project_input:
        project_name, description = project_input.split(" - ", 1)
        project_name = project_name.strip()
        description = description.strip()
    else:
        project_name = project_input
        description = ""
    
    if not project_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    try:
        project_id = await ProjectDB.create_project(project_name, description, user_id)
        
        response_text = f"‚úÖ <b>–ü–†–û–ï–ö–¢ –°–û–ó–î–ê–ù</b>\n\n"
        response_text += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {project_name}\n"
        if description:
            response_text += f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
        response_text += f"üÜî <b>ID:</b> {project_id}\n"
        response_text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        response_text += "üéØ –¢–µ–ø–µ—Ä—å –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É!"
        
        await message.answer(response_text, parse_mode="HTML")
        
        log_action(user_id, "project_created", f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project_name}")
        
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")


async def deactivate_project_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deactivate - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = message.from_user.id
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if config.get_user_role(user_id) != "manager":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/deactivate Alpha Marketing</code>",
            parse_mode="HTML"
        )
        return
    
    project_name = command_parts[1].strip()
    
    try:
        if await ProjectDB.deactivate_project(project_name):
            await message.answer(
                f"‚úÖ <b>–ü–†–û–ï–ö–¢ –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù</b>\n\n"
                f"üìù <b>–ü—Ä–æ–µ–∫—Ç:</b> {project_name}\n"
                f"‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ–∞–∫—Ç–∏–≤–µ–Ω\n\n"
                f"‚ÑπÔ∏è –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏ –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.\n"
                f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/activate {project_name}</code>",
                parse_mode="HTML"
            )
            log_action(user_id, "project_deactivated", f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project_name}")
        else:
            await message.answer(f"‚ùå –ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")


async def activate_project_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /activate - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = message.from_user.id
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if config.get_user_role(user_id) != "manager":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/activate Alpha Marketing</code>",
            parse_mode="HTML"
        )
        return
    
    project_name = command_parts[1].strip()
    
    try:
        if await ProjectDB.activate_project(project_name):
            await message.answer(
                f"‚úÖ <b>–ü–†–û–ï–ö–¢ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù</b>\n\n"
                f"üìù <b>–ü—Ä–æ–µ–∫—Ç:</b> {project_name}\n"
                f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω\n\n"
                f"üéØ –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏ —Å–Ω–æ–≤–∞ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É!",
                parse_mode="HTML"
            )
            log_action(user_id, "project_activated", f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project_name}")
        else:
            await message.answer(f"‚ùå –ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")


def setup_manager_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    
    def is_manager(message: Message) -> bool:
        return Config.get_user_role(message.from_user.id) == "manager"
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
    dp.message.register(
        add_balance_handler,
        F.text & (~F.text.regexp(r"^/", flags=re.IGNORECASE)),  # –Ω–µ –∫–æ–º–∞–Ω–¥—ã
        is_manager
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    dp.message.register(
        statistics_handler,
        Command("stats"),
        is_manager
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    dp.message.register(
        statistics_handler,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ –∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        Command("balance"),
        is_manager
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞
    dp.message.register(
        ai_assistant_handler,
        Command("ai"),
        is_manager
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    dp.message.register(
        reset_balance_command_handler,
        Command("resetbalance"),
        is_manager
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞
    dp.message.register(
        dashboard_command_handler,
        Command("dashboard"),
        is_manager
    )
    
    # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏
    dp.message.register(
        projects_list_handler,
        Command("projects"),
        is_manager
    )
    
    dp.message.register(
        add_project_handler,
        Command("addproject"),
        is_manager
    )
    
    dp.message.register(
        deactivate_project_handler,
        Command("deactivate"),
        is_manager
    )
    
    dp.message.register(
        activate_project_handler,
        Command("activate"),
        is_manager
    ) 