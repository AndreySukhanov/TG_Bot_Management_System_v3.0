"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–≤.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ.
"""

from aiogram import Dispatcher, F
from aiogram.types import Message, Document, PhotoSize
from utils.config import Config
from utils.logger import log_action
from nlp.parser import PaymentParser
from nlp.hybrid_parser import HybridPaymentParser
from handlers.nlp_command_handler import smart_message_router
from db.database import PaymentDB, BalanceDB, ProjectDB
from utils.file_handler import save_file
import logging
import re

logger = logging.getLogger(__name__)


async def payment_request_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–≤"""
    user_id = message.from_user.id
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if config.get_user_role(user_id) != "marketer":
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
    if await smart_message_router(message):
        return  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞
    
    log_action(user_id, "payment_request", message.text or message.caption or "")
    
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
        parser = HybridPaymentParser()
        message_text = message.text or message.caption or ""
        payment_data = await parser.parse_payment_message(message_text)
        
        if not payment_data:
            await message.answer(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É.</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫! –ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ <code>–ü—Ä–∏–≤–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Ñ–µ–π—Å–±—É–∫ –Ω–∞ —Å–æ—Ç–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ê–ª—å—Ñ–∞ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç—É</code>\n"
                "‚Ä¢ <code>–ù—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞ –≥—É–≥–ª –∞–¥—Å 50 –¥–æ–ª–ª–∞—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç –ë–µ—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω +1234567890</code>\n"
                "‚Ä¢ <code>–û–ø–ª–∞—Ç–∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º 200$ –ø—Ä–æ–µ–∫—Ç –ì–∞–º–º–∞ —Å—á–µ—Ç 1234-5678</code>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.",
                parse_mode="HTML"
            )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_path = None
        if message.document or message.photo:
            try:
                file_path = await save_file(message)
                if payment_data["payment_method"] == "file":
                    payment_data["payment_details"] = f"–§–∞–π–ª: {file_path}"
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
                await message.answer(f"‚ö†Ô∏è {str(e)}")
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –Ω–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞.")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        project_exists = await ProjectDB.project_exists(payment_data["project_name"])
        if not project_exists:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
            active_projects = await ProjectDB.get_project_names()
            
            error_message = f"‚ùå <b>–ü—Ä–æ–µ–∫—Ç '{payment_data['project_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.</b>\n\n"
            
            if active_projects:
                error_message += "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:</b>\n"
                for project in active_projects:
                    error_message += f"‚Ä¢ {project}\n"
                error_message += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ."
            else:
                error_message += "üìã <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.</b>\n\n"
                error_message += "‚ÑπÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞."
            
            await message.answer(error_message, parse_mode="HTML")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        payment_id = await PaymentDB.create_payment(
            marketer_id=user_id,
            service_name=payment_data["service_name"],
            amount=payment_data["amount"],
            payment_method=payment_data["payment_method"],
            payment_details=payment_data["payment_details"],
            project_name=payment_data["project_name"],
            file_path=file_path
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥—É
        await message.answer(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"üìã <b>ID –∑–∞—è–≤–∫–∏:</b> <code>{payment_id}</code>\n"
            f"üõçÔ∏è <b>–°–µ—Ä–≤–∏—Å:</b> {payment_data['service_name']}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {payment_data['amount']}$\n"
            f"üè∑Ô∏è <b>–ü—Ä–æ–µ–∫—Ç:</b> {payment_data['project_name']}\n"
            f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {payment_data['payment_method']}\n"
            f"üìù <b>–î–µ—Ç–∞–ª–∏:</b> {payment_data['payment_details']}\n\n"
            f"‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n"
            f"–§–∏–Ω–∞–Ω—Å–∏—Å—Ç –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–∞–º
        await notify_financiers_about_payment(message.bot, payment_id, payment_data)
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏: {str(e)}\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def notify_financiers_about_payment(bot, payment_id: int, payment_data: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    config = Config()
    
    notification_text = (
        f"üîî <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –û–ü–õ–ê–¢–£</b>\n\n"
        f"üìã <b>ID:</b> <code>{payment_id}</code>\n"
        f"üõçÔ∏è <b>–°–µ—Ä–≤–∏—Å:</b> {payment_data['service_name']}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {payment_data['amount']}$\n"
        f"üè∑Ô∏è <b>–ü—Ä–æ–µ–∫—Ç:</b> {payment_data['project_name']}\n"
        f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {payment_data['payment_method']}\n"
        f"üìù <b>–î–µ—Ç–∞–ª–∏:</b> {payment_data['payment_details']}\n\n"
        f"üí∏ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        f"<code>–û–ø–ª–∞—á–µ–Ω–æ {payment_id}</code> + –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
    )
    
    for financier_id in config.FINANCIERS:
        try:
            await bot.send_message(
                financier_id, 
                notification_text, 
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç—É {financier_id}: {e}")


async def notify_managers_low_balance(bot):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ"""
    config = Config()
    current_balance = await BalanceDB.get_balance()
    
    notification_text = (
        f"‚ö†Ô∏è <b>–ù–ò–ó–ö–ò–ô –ë–ê–õ–ê–ù–°!</b>\n\n"
        f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {current_balance:.2f}$\n"
        f"üìâ <b>–ü–æ—Ä–æ–≥:</b> {config.LOW_BALANCE_THRESHOLD}$\n\n"
        f"üí≥ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!"
    )
    
    for manager_id in config.MANAGERS:
        try:
            await bot.send_message(
                manager_id,
                notification_text,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é {manager_id}: {e}")


def setup_marketer_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–≤"""
    
    def is_marketer(message: Message) -> bool:
        return Config.get_user_role(message.from_user.id) == "marketer"
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É (–ª—é–±–æ–π —Ç–µ–∫—Å—Ç –æ—Ç –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞)
    dp.message.register(
        payment_request_handler,
        F.text & (~F.text.regexp(r"^/", flags=re.IGNORECASE)),  # –Ω–µ –∫–æ–º–∞–Ω–¥—ã
        is_marketer
    )
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏/—Ñ–æ—Ç–æ –æ—Ç –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–≤ (–ª—é–±–∞—è –ø–æ–¥–ø–∏—Å—å)
    dp.message.register(
        payment_request_handler,
        (F.document | F.photo) & (~F.caption.regexp(r"^/", flags=re.IGNORECASE)),
        is_marketer
    )


async def my_payments_handler(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞"""
    try:
        from db.database import PaymentDB
        
        marketer_id = message.from_user.id
        payments = await PaymentDB.get_payments_by_marketer(marketer_id)
        
        if not payments:
            await message.answer(
                "üìù <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º:\n"
                "‚Ä¢ '–ù—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞ –§–µ–π—Å–±—É–∫ 100$ –ø—Ä–æ–µ–∫—Ç –ê–ª—å—Ñ–∞'\n"
                "‚Ä¢ '–û–ø–ª–∞—Ç–∏ –ì—É–≥–ª –ê–¥—Å 50 –¥–æ–ª–ª–∞—Ä–æ–≤ –∫—Ä–∏–ø—Ç–æ–π'",
                parse_mode="HTML"
            )
            return
            
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending = [p for p in payments if p['status'] == 'pending']
        paid = [p for p in payments if p['status'] == 'paid']
        
        message_parts = ["üìù <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏</b>\n"]
        
        if pending:
            message_parts.append("‚è≥ <b>–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>")
            for payment in pending[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                message_parts.append(
                    f"‚Ä¢ ID {payment['id']}: <b>{payment['amount']}$</b> - {payment['service_name']}\n"
                    f"  üìã {payment['project_name']} | üí≥ {payment['payment_method']}"
                )
            message_parts.append("")
            
        if paid:
            message_parts.append("‚úÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ:</b>")
            for payment in paid[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                message_parts.append(
                    f"‚Ä¢ ID {payment['id']}: <b>{payment['amount']}$</b> - {payment['service_name']}"
                )
            message_parts.append("")
            
        message_parts.append(f"üìä <b>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:</b> {len(payments)}")
        
        await message.answer(
            "\n".join(message_parts),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def last_payment_handler(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞"""
    try:
        from db.database import PaymentDB
        
        marketer_id = message.from_user.id
        payments = await PaymentDB.get_payments_by_marketer(marketer_id)
        
        if not payments:
            await message.answer(
                "üìù <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º:\n"
                "‚Ä¢ '–ù—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞ –§–µ–π—Å–±—É–∫ 100$ –ø—Ä–æ–µ–∫—Ç –ê–ª—å—Ñ–∞'\n"
                "‚Ä¢ '–û–ø–ª–∞—Ç–∏ –ì—É–≥–ª –ê–¥—Å 50 –¥–æ–ª–ª–∞—Ä–æ–≤ –∫—Ä–∏–ø—Ç–æ–π'",
                parse_mode="HTML"
            )
            return
            
        # –ë–µ—Ä–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É
        last_payment = payments[0]
        
        # –°—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
        status_emoji = {
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω–∞',
            'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
        }.get(last_payment['status'], f"‚ùì {last_payment['status']}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        created_date = last_payment['created_at'][:16].replace('T', ' ')
        
        await message.answer(
            f"üìù <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞</b>\n\n"
            f"üÜî <b>ID:</b> {last_payment['id']}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {last_payment['amount']}$\n"
            f"üõçÔ∏è <b>–°–µ—Ä–≤–∏—Å:</b> {last_payment['service_name']}\n"
            f"üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> {last_payment['project_name']}\n"
            f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {last_payment['payment_method']}\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {created_date}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji}\n\n"
            f"üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ —Å–∫–∞–∂–∏—Ç–µ: '–ú–æ–∏ –∑–∞—è–≤–∫–∏'",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 