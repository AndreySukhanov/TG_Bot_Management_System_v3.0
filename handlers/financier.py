"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–æ–≤.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏ –∫–æ–º–∞–Ω–¥—ã –±–∞–ª–∞–Ω—Å–∞.
"""

import re
from aiogram import Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from utils.config import Config
from utils.logger import log_action
from db.database import PaymentDB, BalanceDB
from utils.file_handler import save_file
from handlers.nlp_command_handler import smart_message_router
import logging

logger = logging.getLogger(__name__)


async def payment_confirmation_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    user_id = message.from_user.id
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if config.get_user_role(user_id) != "financier":
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
    if await smart_message_router(message):
        return  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞
    
    log_action(user_id, "payment_confirmation", message.text)
    
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = message.text or message.caption or ""
        match = re.search(r"–æ–ø–ª–∞—á–µ–Ω–æ\s+(\d+)", text, re.IGNORECASE)
        
        if not match:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "<code>–û–ø–ª–∞—á–µ–Ω–æ [ID_–ó–ê–Ø–í–ö–ò]</code> + –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>–û–ø–ª–∞—á–µ–Ω–æ 123</code>",
                parse_mode="HTML"
            )
            return
        
        payment_id = int(match.group(1))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        payment = await PaymentDB.get_payment(payment_id)
        if not payment:
            await message.answer(
                f"‚ùå –ó–∞—è–≤–∫–∞ —Å ID <code>{payment_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode="HTML"
            )
            return
        
        if payment["status"] != "pending":
            await message.answer(
                f"‚ùå –ó–∞—è–≤–∫–∞ <code>{payment_id}</code> —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{payment['status']}</b>",
                parse_mode="HTML"
            )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_hash = None
        confirmation_file = None
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö—ç—à–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        hash_match = re.search(r"—Ö—ç—à[:=]\s*([0-9a-fA-F]+)", text, re.IGNORECASE)
        if hash_match:
            confirmation_hash = hash_match.group(1)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if message.document or message.photo:
            try:
                confirmation_file = await save_file(message)
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
                await message.answer(f"‚ö†Ô∏è {str(e)}")
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        await PaymentDB.update_payment_status(
            payment_id=payment_id,
            status="paid",
            confirmation_hash=confirmation_hash,
            confirmation_file=confirmation_file
        )
        
        # –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã
        await BalanceDB.subtract_balance(
            payment["amount"], 
            payment_id, 
            f"–û–ø–ª–∞—Ç–∞ {payment['service_name']} –¥–ª—è {payment['project_name']}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç—É
        await message.answer(
            f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            f"üìã <b>ID –∑–∞—è–≤–∫–∏:</b> <code>{payment_id}</code>\n"
            f"üõçÔ∏è <b>–°–µ—Ä–≤–∏—Å:</b> {payment['service_name']}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {payment['amount']}$\n"
            f"üè∑Ô∏è <b>–ü—Ä–æ–µ–∫—Ç:</b> {payment['project_name']}\n\n"
            f"‚úÖ –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ.",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞
        await notify_marketer_payment_confirmed(
            message.bot, 
            payment["marketer_id"], 
            payment_id, 
            payment
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∑–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
        if await BalanceDB.should_send_low_balance_alert():
            await notify_managers_low_balance(message.bot)
            await BalanceDB.update_low_balance_alert()
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def balance_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–æ–≤"""
    user_id = message.from_user.id
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if config.get_user_role(user_id) not in ["financier", "manager"]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ.")
        return
    
    log_action(user_id, "balance_check", "")
    
    try:
        current_balance = await BalanceDB.get_balance()
        
        status_emoji = "‚úÖ" if current_balance >= config.LOW_BALANCE_THRESHOLD else "‚ö†Ô∏è"
        
        await message.answer(
            f"{status_emoji} <b>–¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°</b>\n\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {current_balance:.2f}$\n"
            f"üìä <b>–ü–æ—Ä–æ–≥:</b> {config.LOW_BALANCE_THRESHOLD}$\n\n"
            f"{'üü¢ –ë–∞–ª–∞–Ω—Å –≤ –Ω–æ—Ä–º–µ' if current_balance >= config.LOW_BALANCE_THRESHOLD else 'üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ."
        )


async def notify_marketer_payment_confirmed(bot, marketer_id: int, payment_id: int, payment: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã"""
    
    notification_text = (
        f"‚úÖ <b>–û–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!</b>\n\n"
        f"üìã <b>ID –∑–∞—è–≤–∫–∏:</b> <code>{payment_id}</code>\n"
        f"üõçÔ∏è <b>–°–µ—Ä–≤–∏—Å:</b> {payment['service_name']}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {payment['amount']}$\n"
        f"üè∑Ô∏è <b>–ü—Ä–æ–µ–∫—Ç:</b> {payment['project_name']}\n\n"
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞!"
    )
    
    try:
        await bot.send_message(
            marketer_id,
            notification_text,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥—É {marketer_id}: {e}")


async def notify_managers_low_balance(bot):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ"""
    config = Config()
    current_balance = await BalanceDB.get_balance()
    
    notification_text = (
        f"‚ö†Ô∏è <b>–ù–ò–ó–ö–ò–ô –ë–ê–õ–ê–ù–°!</b>\n\n"
        f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {current_balance:.2f}$\n"
        f"üìâ <b>–ü–æ—Ä–æ–≥:</b> {config.LOW_BALANCE_THRESHOLD}$\n\n"
        f"üí≥ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!"
    )
    
    for manager_id in config.MANAGERS:
        try:
            await bot.send_message(
                manager_id,
                notification_text,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é {manager_id}: {e}")


def setup_financier_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–æ–≤"""
    
    def is_financier_or_manager(message: Message) -> bool:
        role = Config.get_user_role(message.from_user.id)
        return role in ["financier", "manager"]
    
    def is_financier(message: Message) -> bool:
        return Config.get_user_role(message.from_user.id) == "financier"
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    dp.message.register(
        payment_confirmation_handler,
        F.text.regexp(r"–æ–ø–ª–∞—á–µ–Ω–æ\s+\d+", flags=re.IGNORECASE),
        is_financier
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —Ñ–∞–π–ª–∞–º–∏
    dp.message.register(
        payment_confirmation_handler,
        (F.document | F.photo) & F.caption.regexp(r"–æ–ø–ª–∞—á–µ–Ω–æ\s+\d+", flags=re.IGNORECASE),
        is_financier
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ –±–∞–ª–∞–Ω—Å–∞
    dp.message.register(
        balance_command_handler,
        Command("balance"),
        is_financier_or_manager
    ) 