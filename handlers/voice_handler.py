import os
import tempfile
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message, Voice
import openai

from utils.config import Config
import logging

logger = logging.getLogger(__name__)
router = Router()

class VoiceProcessor:
    def __init__(self):
        self.config = Config()
        openai.api_key = self.config.OPENAI_API_KEY
        
    async def process_voice_message(self, voice: Voice, bot) -> Optional[str]:
        try:
            voice_file = await bot.get_file(voice.file_id)
            
            with tempfile.NamedTemporaryFile(suffix='.oga', delete=False) as temp_file:
                await bot.download_file(voice_file.file_path, temp_file)
                temp_file_path = temp_file.name
            
            with open(temp_file_path, 'rb') as audio_file:
                transcript = openai.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    language="ru"
                )
            
            os.unlink(temp_file_path)
            
            return transcript.text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

    async def _handle_voice_payment_request(self, message, parsed_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–≤"""
        try:
            from db.database import PaymentDB, BalanceDB
            
            amount = parsed_data.get("amount")
            platform = parsed_data.get("platform")
            if not platform or not platform.strip():
                platform = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            project = parsed_data.get("project")
            if not project or not project.strip():
                project = "–ù–µ —É–∫–∞–∑–∞–Ω" 
            payment_method = parsed_data.get("payment_method")
            if not payment_method or not payment_method.strip():
                payment_method = "–ù–µ —É–∫–∞–∑–∞–Ω"
            payment_details = parsed_data.get("payment_details")
            description = parsed_data.get("description", "")
            
            if not amount or amount <= 0:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ: '–ù—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞ –§–µ–π—Å–±—É–∫ –Ω–∞ 100 –¥–æ–ª–ª–∞—Ä–æ–≤'"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            current_balance = await BalanceDB.get_balance()
            
            if current_balance < amount:
                await message.answer(
                    f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!**\n\n"
                    f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{current_balance:.2f}$**\n"
                    f"üí∏ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞: **{amount:.2f}$**\n"
                    f"üìâ –ù–µ—Ö–≤–∞—Ç–∫–∞: **{amount - current_balance:.2f}$**\n\n"
                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.",
                    parse_mode="Markdown"
                )
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            payment_id = await PaymentDB.create_payment(
                marketer_id=message.from_user.id,
                service_name=platform,
                amount=amount,
                payment_method=payment_method,
                payment_details=payment_details or "",
                project_name=project
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥—É
            await message.answer(
                f"‚úÖ **–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
                f"üÜî ID –∑–∞—è–≤–∫–∏: **{payment_id}**\n"
                f"üí∞ –°—É–º–º–∞: **{amount}$**\n"
                f"üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: **{platform}**\n"
                f"üìã –ü—Ä–æ–µ–∫—Ç: **{project}**\n"
                f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: **{payment_method}**\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                f"üì§ –§–∏–Ω–∞–Ω—Å–∏—Å—Ç–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                parse_mode="Markdown"
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–æ–≤
            from handlers.marketer import notify_financiers_about_payment
            await notify_financiers_about_payment(
                message.bot, 
                payment_id, 
                {
                    'amount': amount,
                    'service_name': platform,
                    'project_name': project,
                    'payment_method': payment_method,
                    'payment_details': payment_details or ""
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞—è–≤–∫–∏: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def _handle_voice_payment_confirm(self, message, parsed_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–æ–≤"""
        try:
            from db.database import PaymentDB, BalanceDB
            
            payment_id = parsed_data.get("payment_id")
            description = parsed_data.get("description", "")
            
            if not payment_id:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å: '–û–ø–ª–∞—á–µ–Ω–æ 123'"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            payment = await PaymentDB.get_payment(payment_id)
            if not payment:
                await message.answer(
                    f"‚ùå –ó–∞—è–≤–∫–∞ —Å ID `{payment_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    parse_mode="Markdown"
                )
                return
            
            if payment["status"] != "pending":
                await message.answer(
                    f"‚ùå –ó–∞—è–≤–∫–∞ `{payment_id}` —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.\n"
                    f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: **{payment['status']}**",
                    parse_mode="Markdown"
                )
                return
            
            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞
            current_balance = await BalanceDB.get_balance()
            payment_amount = float(payment["amount"])
            
            if current_balance < payment_amount:
                await message.answer(
                    f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!**\n\n"
                    f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{current_balance:.2f}$**\n"
                    f"üí∏ –°—É–º–º–∞ –∑–∞—è–≤–∫–∏: **{payment_amount:.2f}$**\n"
                    f"üìâ –ù–µ—Ö–≤–∞—Ç–∫–∞: **{payment_amount - current_balance:.2f}$**",
                    parse_mode="Markdown"
                )
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
            await PaymentDB.update_payment_status(payment_id, "paid")
            
            # –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞
            new_balance = current_balance - payment_amount
            await BalanceDB.subtract_balance(
                payment_amount,
                payment_id,
                f"–û–ø–ª–∞—Ç–∞ –∑–∞—è–≤–∫–∏ #{payment_id} ({payment['platform']} - {payment['project']})"
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç—É
            await message.answer(
                f"‚úÖ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!**\n\n"
                f"üÜî ID –∑–∞—è–≤–∫–∏: **{payment_id}**\n"
                f"üí∞ –°—É–º–º–∞: **{payment_amount:.2f}$**\n"
                f"üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: **{payment['platform']}**\n"
                f"üìã –ü—Ä–æ–µ–∫—Ç: **{payment['project']}**\n"
                f"üí≥ –°–ø–æ—Å–æ–±: **{payment['payment_method']}**\n\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: **{current_balance:.2f}$** ‚Üí **{new_balance:.2f}$**\n"
                f"üì§ –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
                parse_mode="Markdown"
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞
            from handlers.financier import notify_marketer_payment_confirmed
            await notify_marketer_payment_confirmed(
                message.bot,
                payment["user_id"],
                payment_id,
                payment
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∑–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            config = Config()
            if new_balance < config.LOW_BALANCE_THRESHOLD:
                from handlers.financier import notify_managers_low_balance
                await notify_managers_low_balance(message.bot)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def _handle_voice_ai_analytics(self, message, parsed_data, original_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö AI-–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π"""
        try:
            description = parsed_data.get("description", "")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–±–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ò–ò-–∞–≥–µ–Ω—Ç–∞, –ª–∏–±–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            query = original_query.strip()
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º AI-–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å: {query}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ AI-–ø–æ–º–æ—â–Ω–∏–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            from nlp.manager_ai_assistant import process_manager_query
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ, –º–æ–º–µ–Ω—Ç...")
            
            response = await process_manager_query(query)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(
                f"ü§ñ **AI-–ê–Ω–∞–ª–∏—Ç–∏–∫:**\n\n{response}",
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ AI-–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def _handle_voice_ai_help(self, message, user_role: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É"""
        if user_role == "manager":
            await message.answer(
                "ü§ñ **AI-–ü–æ–º–æ—â–Ω–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
                "‚Ä¢ '–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ–º–∞–Ω–¥–µ?'\n"
                "‚Ä¢ '–ö–∞–∫–æ–π —Å–µ–π—á–∞—Å –±–∞–ª–∞–Ω—Å?'\n"
                "‚Ä¢ '–ü–ª–∞—Ç–µ–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é'\n"
                "‚Ä¢ '–ü–æ–∫–∞–∂–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã'\n"
                "‚Ä¢ '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'\n"
                "‚Ä¢ '–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞'\n"
                "‚Ä¢ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º'\n\n"
                "**–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É:**\n"
                "‚Ä¢ `/ai –í–∞—à –≤–æ–ø—Ä–æ—Å`\n\n"
                "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å!",
                parse_mode="Markdown"
            )
        else:
            await message.answer("‚ùå AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º.")

    def _get_voice_suggestions_for_role(self, user_role: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏"""
        suggestions = {
            "manager": [
                "üë®‚Äçüíº **–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:**",
                "‚Ä¢ '–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' - –ø–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
                "‚Ä¢ '–ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å' - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏", 
                "‚Ä¢ '–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ–º–∞–Ω–¥–µ?' - AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                "‚Ä¢ '–ö–∞–∫–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –±—ã–ª–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?' - AI-–∞–Ω–∞–ª–∏–∑",
                "‚Ä¢ '–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞' - AI-–æ—Ç—á–µ—Ç",
                "‚Ä¢ '–ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ 1000' - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                "‚Ä¢ '–û–±–Ω—É–ª–∏ –±–∞–ª–∞–Ω—Å' - —Å–±—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –∫ –Ω—É–ª—é", 
                "‚Ä¢ '–î–∞—à–±–æ—Ä–¥' - —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
                "‚Ä¢ '–ò–ò –ø–æ–º–æ—â–Ω–∏–∫' - –∑–∞–ø—É—Å–∫ AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                "‚Ä¢ '–ü–æ–º–æ—â—å' - —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            ],
            "financier": [
                "üí∞ **–§–∏–Ω–∞–Ω—Å–∏—Å—Ç:**",
                "‚Ä¢ '–û–ø–ª–∞—á–µ–Ω–æ 123' - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞—è–≤–∫–∏",
                "‚Ä¢ '–ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å' - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å–∏—Å—Ç–µ–º—ã",
                "‚Ä¢ '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏' - –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π",
                "‚Ä¢ '–ü–æ–º–æ—â—å' - —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            ],
            "marketer": [
                "üì± **–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥:**",
                "‚Ä¢ '–ù—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞ –§–µ–π—Å–±—É–∫ 100 –¥–æ–ª–ª–∞—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç –ê–ª—å—Ñ–∞' - –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É",
                "‚Ä¢ '–û–ø–ª–∞—Ç–∏ –ì—É–≥–ª –ê–¥—Å 250$ —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É' - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏",
                "‚Ä¢ '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ë–µ—Ç–∞' - –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
                "‚Ä¢ '–ü–æ–º–æ—â—å' - —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            ]
        }
        
        role_suggestions = suggestions.get(user_role, ["‚Ä¢ '–ü–æ–º–æ—â—å' - —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"])
        return "\n".join(role_suggestions)

voice_processor = VoiceProcessor()

@router.message(F.voice)
async def handle_voice_message(message: Message):
    try:
        user_id = message.from_user.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        transcription = await voice_processor.process_voice_message(message.voice, message.bot)
        logger.info(f"Transcription result: {transcription}")
        
        if transcription:
            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {transcription}")
            
            await message.reply(
                f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {transcription}\n\n"
                f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
                parse_mode="HTML"
            )
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
            try:
                logger.info("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç")
                
                user_id = message.from_user.id
                config = Config()
                user_role = config.get_user_role(user_id)
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç
                from nlp.universal_ai_parser import UniversalAIParser
                
                ai_parser = UniversalAIParser()
                parsed_data = await ai_parser.parse_message(transcription, user_role)
                
                if parsed_data:
                    operation_type = parsed_data["operation_type"]
                    confidence = parsed_data.get("confidence", 0)
                    
                    logger.info(f"–ò–ò-–∞–≥–µ–Ω—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏—é '{operation_type}' —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence}")
                    
                    # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if confidence < 0.7:
                        await message.answer(
                            f"ü§ñ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{transcription}'\n"
                            f"‚ö†Ô∏è –ù–µ —Å–æ–≤—Å–µ–º —É–≤–µ—Ä–µ–Ω –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0%})\n\n"
                            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏."
                        )
                        return
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –∏ —Ç–∏–ø–∞
                    if operation_type == "balance_add":
                        if user_role == "manager":
                            from handlers.manager import process_balance_add
                            await process_balance_add(message, parsed_data)
                        else:
                            await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å.")
                            
                    elif operation_type == "balance_reset":
                        if user_role == "manager":
                            from handlers.manager import process_balance_reset
                            await process_balance_reset(message, parsed_data)
                        else:
                            await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ–±–Ω—É–ª—è—Ç—å –±–∞–ª–∞–Ω—Å.")
                            
                    elif operation_type == "payment_request":
                        if user_role == "marketer":
                            await voice_processor._handle_voice_payment_request(message, parsed_data)
                        else:
                            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.")
                            
                    elif operation_type == "payment_confirm":
                        if user_role == "financier":
                            await voice_processor._handle_voice_payment_confirm(message, parsed_data)
                        else:
                            await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç—ã –º–æ–≥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ–ø–ª–∞—Ç—ã.")
                            
                    elif operation_type == "analytics_query":
                        # –ü—Ä–æ—Å—Ç—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º —Ä–æ–ª—è–º
                        if user_role == "manager":
                            from handlers.manager import statistics_handler
                            await statistics_handler(message)
                        elif user_role == "financier":
                            from handlers.financier import balance_command_handler
                            await balance_command_handler(message)
                        elif user_role == "marketer":
                            # –î–ª—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∑–∞—è–≤–∫–∏
                            original_text = transcription.lower()
                            if any(word in original_text for word in ['—Å—Ç–∞—Ç—É—Å', '–∑–∞—è–≤–∫', '–ø–æ—Å–ª–µ–¥–Ω', '–º–æ–∏ –∑–∞—è–≤–∫–∏', '–∑–∞—è–≤–∫–∏']):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è - –æ–¥–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∏–ª–∏ –≤—Å–µ –∑–∞—è–≤–∫–∏
                                if any(word in original_text for word in ['–ø–æ—Å–ª–µ–¥–Ω', '—Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π', '–∫—Ä–∞–π–Ω–µ–π']):
                                    from handlers.marketer import last_payment_handler
                                    await last_payment_handler(message)
                                else:
                                    from handlers.marketer import my_payments_handler
                                    await my_payments_handler(message)
                            else:
                                await message.answer("üìä –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏.\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.")
                            
                    elif operation_type == "ai_analytics":
                        # –°–ª–æ–∂–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π)
                        if user_role == "manager":
                            await voice_processor._handle_voice_ai_analytics(message, parsed_data, transcription)
                        elif user_role == "marketer":
                            # –î–ª—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∑–∞—è–≤–∫–∏
                            original_text = transcription.lower()
                            if any(word in original_text for word in ['—Å—Ç–∞—Ç—É—Å', '–∑–∞—è–≤–∫', '–ø–æ—Å–ª–µ–¥–Ω', '–º–æ–∏ –∑–∞—è–≤–∫–∏', '–∑–∞—è–≤–∫–∏']):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è - –æ–¥–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∏–ª–∏ –≤—Å–µ –∑–∞—è–≤–∫–∏
                                if any(word in original_text for word in ['–ø–æ—Å–ª–µ–¥–Ω', '—Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π', '–∫—Ä–∞–π–Ω–µ–π']):
                                    from handlers.marketer import last_payment_handler
                                    await last_payment_handler(message)
                                else:
                                    from handlers.marketer import my_payments_handler
                                    await my_payments_handler(message)
                            else:
                                await message.answer("‚ùå AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º.")
                        else:
                            await message.answer("‚ùå AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º.")
                            
                    elif operation_type == "system_command":
                        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ–º–æ—â—å, —Å—Ç–∞—Ä—Ç, –¥–∞—à–±–æ—Ä–¥, AI –∏ —Ç.–¥.)
                        description = parsed_data.get("description", "").lower()
                        original_text = transcription.lower()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏, –∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                        if any(word in description for word in ['–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞', 'help']) or \
                           any(word in original_text for word in ['–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞', 'help', '—á—Ç–æ —É–º–µ–µ—à—å', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏']):
                            from handlers.common import help_handler
                            await help_handler(message)
                        elif any(word in description for word in ['—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞—Ç—å', '–ø—Ä–∏–≤–µ—Ç', 'start', '–º–µ–Ω—é', 'menu']) or \
                             any(word in original_text for word in ['—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞—Ç—å', '–ø—Ä–∏–≤–µ—Ç', 'start', '–º–µ–Ω—é', 'menu', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
                            from handlers.common import start_handler
                            await start_handler(message)
                        elif any(word in description for word in ['–¥–∞—à–±–æ—Ä–¥', 'dashboard', '—Å—Å—ã–ª–∫–∞', '–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '–ø–∞–Ω–µ–ª—å']) or \
                             any(word in original_text for word in ['–¥–∞—à–±–æ—Ä–¥', 'dashboard', '—Å—Å—ã–ª–∫–∞', '–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '–ø–∞–Ω–µ–ª—å']):
                            if user_role == "manager":
                                from handlers.manager import dashboard_command_handler
                                await dashboard_command_handler(message)
                            else:
                                await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∫ –¥–∞—à–±–æ—Ä–¥—É –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π.")
                        elif any(word in description for word in ['–∏–∏', 'ai', '–ø–æ–º–æ—â–Ω–∏–∫', '–∞–Ω–∞–ª–∏—Ç–∏–∫', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π']) or \
                             any(word in original_text for word in ['–∏–∏', 'ai', '–ø–æ–º–æ—â–Ω–∏–∫', '–∞–Ω–∞–ª–∏—Ç–∏–∫', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π']):
                            await voice_processor._handle_voice_ai_help(message, user_role)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –ø—Ä–æ–±—É–µ–º –ø–æ–º–æ—â—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            logger.info(f"–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{original_text}', –æ–ø–∏—Å–∞–Ω–∏–µ: '{description}'")
                            from handlers.common import help_handler
                            await help_handler(message)
                            
                    else:
                        logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation_type}")
                        await message.answer(
                            f"ü§ñ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{transcription}'\n"
                            f"–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_type}\n\n"
                            f"–ù–µ –∑–Ω–∞—é, –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
                        )
                        
                else:
                    logger.info("–ò–ò-–∞–≥–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                    suggestions = voice_processor._get_voice_suggestions_for_role(user_role)
                    await message.answer(
                        f"ü§ñ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{transcription}'\n\n"
                        f"–ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å. –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏:\n\n"
                        f"{suggestions}\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º."
                    )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ –ò–ò-–∞–≥–µ–Ω—Ç: {e}")
                await message.reply(f"‚ö†Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {transcription}\n"
                                  f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
                                  
            
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ handle_voice_message: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

def setup_voice_handlers(dp):
    dp.include_router(router)